// read a tutorial no how we can create completely a bower component

// initialize (install) bower in our root project folder
> bower init

// to install new dependencies to the project
> bower install --save [dependency] 

// to install new dependencies to the project only for the development context
> bower install --dev-save [dependency] 

// normally direction of the repository
> bower register [name-project] [url-project] 

// save new dependency to development context
npm install grunt-proccesshtml --save-dev


// Custom tasks (see GruntFileExample)
// grunt.registerTask('build', ['processhtml']);
// grunt.registerTask('default', ['uglify', 'sass']);
// Several tasks added to grunt (with proccesshtml dependency added before)

<!-- build.js main.min.js -->
<scripts></scripts>
<!-- /build -->

// Task added to copy minified bootstrap css to build/production folder
// npm install grunt-contrib-copy --save-dev
// grunt.registerTask('default', ['uglify', 'sass']);

We upload a new repo with a branch called gh-pages; so automatically it will upload everything to our profile in gh-pages (github pages) and post in online.

grunt & grunt build & grunt deploy >>> 
This command will execute all pending tasks and then will deploy everything to the current gh-pages branch.  

grunt + [something] Do the task [something] defined en the grunt field.
grunt = Run the js Grunt file to run all pending tasks
grunt build = execute build task defined in grunt js file. ()
grunt build = realiza las tareas en el grunt file.

// Custom tasks - Examples
grunt.registerTask('deploy', ['gh-pages']);
grunt.registerTask('build', ['processhtml']);
grunt.registerTask('default', ['uglify', 'sass', 'copy']);





